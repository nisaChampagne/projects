{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_244/Desktop/LAMBDA/projects/projectsCollection/src/projects/blog/router.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport { Header, Navigation } from './layout/layout';\nimport Posts from './posts/posts';\nimport SinglePost from './posts/singlepost';\nimport Form from './posts/form';\nimport EditPost from './posts/editpost';\n\nclass Router extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: []\n    };\n\n    this.getPost = () => {\n      axios.get(`https://jsonplaceholder.typicode.com/posts`).then(res => {\n        this.setState({\n          posts: res.data\n        });\n      });\n    };\n\n    this.deletePost = id => {\n      //console.log(id);\n      axios.delete(`https://jsonplaceholder.typicode.com/posts/${id}`).then(res => {\n        if (res.status === 200) {\n          const posts = [...this.state.posts];\n          let result = posts.filter(post => post.id !== id);\n          this.setState({\n            posts: result\n          });\n        }\n      });\n    };\n\n    this.createPost = post => {\n      axios.post(`https://jsonplaceholder.typicode.com/posts`, {\n        post\n      }).then(res => {\n        if (res.status === 201) {\n          Swal.fire('Post Create', 'It is created correctly.', 'success');\n          let postId = {\n            id: res.data.id\n          };\n          const newPost = Object.assign({}, res.data.post, postId);\n          this.setState(prevState => ({\n            posts: [...prevState.posts, newPost]\n          }));\n        }\n      });\n    };\n\n    this.editPost = postUpdate => {\n      const id = postUpdate.id;\n      axios.put(`https://jsonplaceholder.typicode.com/posts/${id}`, {\n        postUpdate\n      }).then(res => {\n        if (res.status === 200) {\n          Swal.fire('Post Updated', 'The changes were saved correctly.', 'success');\n          let postId = res.data.id;\n          const posts = [...this.state.posts];\n          const postEdit = posts.findIndex(post => postId === post.id);\n          posts[postEdit] = postUpdate;\n          this.setState({\n            posts\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getPost();\n  }\n\n  render() {\n    return React.createElement(BrowserRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => {\n        return React.createElement(Posts, {\n          posts: this.state.posts,\n          deletePost: this.deletePost,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/post/:postId\",\n      render: props => {\n        let idPost = props.location.pathname.replace('/post/', '');\n        const posts = this.state.posts;\n        let filter;\n        filter = posts.filter(post => post.id === Number(idPost));\n        return React.createElement(SinglePost, {\n          post: filter[0],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/create\",\n      render: () => {\n        return React.createElement(Form, {\n          createPost: this.createPost,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/edit/:postId\",\n      render: props => {\n        let idPost = props.location.pathname.replace('/edit/', '');\n        const posts = this.state.posts;\n        let filter;\n        filter = posts.filter(post => post.id === Number(idPost));\n        return React.createElement(EditPost, {\n          post: filter[0],\n          editPost: this.editPost,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Router;","map":{"version":3,"sources":["/Users/lambda_school_loaner_244/Desktop/LAMBDA/projects/projectsCollection/src/projects/blog/router.js"],"names":["React","Component","BrowserRouter","Route","Switch","Redirect","axios","Swal","Header","Navigation","Posts","SinglePost","Form","EditPost","Router","state","posts","getPost","get","then","res","setState","data","deletePost","id","delete","status","result","filter","post","createPost","fire","postId","newPost","Object","assign","prevState","editPost","postUpdate","put","postEdit","findIndex","componentDidMount","render","props","idPost","location","pathname","replace","Number"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\n\nimport {BrowserRouter, Route, Switch, Redirect} from 'react-router-dom'\n\nimport axios from 'axios'\nimport Swal from 'sweetalert2'\n\nimport {Header, Navigation} from './layout/layout'\nimport Posts from './posts/posts'\nimport SinglePost from './posts/singlepost'\nimport Form from './posts/form'\nimport EditPost from './posts/editpost'\n\nclass Router extends Component {\n    state = {  \n        posts: []\n    }\n \n    componentDidMount() {\n        this.getPost();\n    }\n \n    getPost = () => {\n        axios.get(`https://jsonplaceholder.typicode.com/posts`)\n             .then( res => {\n                 this.setState({\n                     posts: res.data\n                 }) \n             })\n    }\n \n    deletePost = (id) => {\n        //console.log(id);\n        axios.delete(`https://jsonplaceholder.typicode.com/posts/${id}`)\n        .then(res => {\n            if (res.status === 200) {\n                const posts = [...this.state.posts];\n                let result = posts.filter(post => (\n                    post.id !== id\n                ));\n                this.setState({\n                    posts: result\n                })\n            } \n        })\n    }\n \n    createPost = (post) => {\n        axios.post(`https://jsonplaceholder.typicode.com/posts`, {post})\n             .then(res => {\n                 if (res.status === 201) {\n                    Swal.fire(\n                        'Post Create',\n                        'It is created correctly.',\n                        'success'\n                    )\n \n                    let postId = {id: res.data.id};\n                    const newPost = Object.assign({}, res.data.post, postId)\n \n                    this.setState(prevState => ({\n                        posts: [...prevState.posts, newPost]\n                    }))\n                 }\n             })\n    }\n \n    editPost = (postUpdate) => {\n        const {id} = postUpdate;\n \n        axios.put(`https://jsonplaceholder.typicode.com/posts/${id}`, {postUpdate})\n             .then(res => {\n                 if (res.status === 200) {\n                    Swal.fire(\n                        'Post Updated',\n                        'The changes were saved correctly.',\n                        'success'\n                    )\n \n                    let postId = res.data.id;\n \n\t\t\t\t\tconst posts = [...this.state.posts];\n \n                    const postEdit = posts.findIndex(post => postId === post.id)\n \n                    posts[postEdit] = postUpdate;\n                    this.setState({\n                        posts \n                    })\n                 }\n             })\n    }\n \n    render() { \n        return (  \n            <BrowserRouter>\n \n                <div className=\"container\">\n                    <Header />\n                    <div className=\"row justify-content-center\">\n \n                        <Navigation />\n \n                        <Switch>\n                            <Route exact path=\"/\" render={ () => {\n                                return(\n                                    <Posts \n                                        posts={this.state.posts}\n                                        deletePost={this.deletePost}\n                                    />\n                                );\n                            }} />\n \n                            <Route exact path=\"/post/:postId\" render={ (props) => {\n                                let idPost = props.location.pathname.replace('/post/', '')\n \n                                const posts=this.state.posts;\n                                let filter;\n                                filter = posts.filter(post => (\n                                    post.id === Number(idPost)\n                                ))\n \n \n                                return(\n                                    <SinglePost \n                                        post={filter[0]} \n                                    />\n                                )\n                            }} />\n                            <Route exact path=\"/create\" render={() => {\n                                return(\n                                    <Form \n                                        createPost={this.createPost}\n                                    />\n                                );\n                            }}\n                            />\n                            <Route exact path=\"/edit/:postId\" render={ (props) => {\n                                let idPost = props.location.pathname.replace('/edit/', '')\n                                const posts=this.state.posts;\n                                let filter;\n                                filter = posts.filter(post => (\n                                    post.id === Number(idPost)\n                                ))                                \n                                return(\n                                    <EditPost\n                                        post={filter[0]} \n                                        editPost={this.editPost}\n                                    />\n                                )\n                            }} />                            \n                        </Switch>\n                    </div>\n                </div>            \n            </BrowserRouter>\n        );\n    }\n} \nexport default Router;"]},"metadata":{},"sourceType":"module"}