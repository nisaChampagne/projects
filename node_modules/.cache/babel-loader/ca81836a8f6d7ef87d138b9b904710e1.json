{"ast":null,"code":"import _slicedToArray from \"/Users/lambda_school_loaner_244/Desktop/LAMBDA/projects/projects/projectholder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lambda_school_loaner_244/Desktop/LAMBDA/projects/projects/projectholder/src/projects/calculator/calculator.js\";\nimport React, { useState } from \"react\";\nimport \"./calculator.scss\"; // STEP 4 - import the button and display components\n// Don't forget to import any extra css/scss files you build into the correct component\n\nimport Numbers from './ButtonComponents/NumberButtons/numbers';\nimport Operators from './ButtonComponents/OperatoButtons/Operator/operators';\nimport Specials from './ButtonComponents/SpecialButtons/Specials';\nimport Display from './DisplayComponents/display';\nimport Screen from './DisplayComponents/screen';\n\nfunction App() {\n  // STEP 5 - After you get the components displaying using the provided data file, write your state hooks here.\n  // Once the state hooks are in place write some functions to hold data in state and update that data depending on what it needs to be doing\n  // Your functions should accept a parameter of the the item data being displayed to the DOM (ie - should recieve 5 if the user clicks on\n  // the \"5\" button, or the operator if they click one of those buttons) and then call your setter function to update state.\n  // Don't forget to pass the functions (and any additional data needed) to the components as props\n  const _useState = useState(\"0\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        number = _useState2[0],\n        setNumber = _useState2[1];\n\n  function onClickSpecial(special) {\n    if (special === 'C') {\n      setNumber(\"0\");\n    } else if (special === '%') {\n      const newDisplay = number + \" \" + special + \" \";\n      setNumber(newDisplay);\n    } else if (special === \"+/-\") {\n      const currentExpression = number;\n      const output = eval(currentExpression).toString();\n      setNumber(output);\n\n      if (output > 0) {\n        setNumber(-Math.abs(Number(output)));\n      } else {\n        setNumber(Math.abs(Number(output)));\n      }\n\n      console.log(output);\n    }\n  }\n\n  function onClickNumber(_number) {\n    var currentNumber = \"\";\n\n    if (number !== \"0\") {\n      currentNumber = number;\n    }\n\n    const newNumber = currentNumber + _number;\n    setNumber(newNumber);\n    console.log(newNumber);\n  }\n\n  function onClickOperator(char, value) {\n    if (char === '=') {\n      const currentExpression = number;\n      const output = eval(currentExpression).toString();\n      setNumber(output);\n    } else {\n      const newDisplay = number + \" \" + value + \" \";\n      setNumber(newDisplay);\n      console.log(newDisplay);\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Screen, {\n    data: number,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"buttonHolder\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Specials, {\n    changeData: onClickSpecial,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(Numbers, {\n    changeData: onClickNumber,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Operators, {\n    changeData: onClickOperator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/lambda_school_loaner_244/Desktop/LAMBDA/projects/projects/projectholder/src/projects/calculator/calculator.js"],"names":["React","useState","Numbers","Operators","Specials","Display","Screen","App","number","setNumber","onClickSpecial","special","newDisplay","currentExpression","output","eval","toString","Math","abs","Number","console","log","onClickNumber","_number","currentNumber","newNumber","onClickOperator","char","value"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport \"./calculator.scss\";\n// STEP 4 - import the button and display components\n// Don't forget to import any extra css/scss files you build into the correct component\nimport Numbers from './ButtonComponents/NumberButtons/numbers';\nimport Operators from './ButtonComponents/OperatoButtons/Operator/operators';\nimport Specials from './ButtonComponents/SpecialButtons/Specials';\nimport Display from './DisplayComponents/display';\nimport Screen from './DisplayComponents/screen';\n\nfunction App() {\n  // STEP 5 - After you get the components displaying using the provided data file, write your state hooks here.\n  // Once the state hooks are in place write some functions to hold data in state and update that data depending on what it needs to be doing\n  // Your functions should accept a parameter of the the item data being displayed to the DOM (ie - should recieve 5 if the user clicks on\n  // the \"5\" button, or the operator if they click one of those buttons) and then call your setter function to update state.\n  // Don't forget to pass the functions (and any additional data needed) to the components as props\n  const [number, setNumber] = useState(\"0\");\n\n  function onClickSpecial(special) {\n    if (special === 'C') {\n      setNumber(\"0\");\n    } else if (special === '%') {\n      const newDisplay = number + \" \" + special + \" \";\n      setNumber(newDisplay);\n    } else if (special === \"+/-\") {\n      const currentExpression = number;\n      const output = eval(currentExpression).toString();\n      setNumber(output);\n\n      if (output > 0) {\n        setNumber(-Math.abs(Number(output)));\n      }\n      else {\n        setNumber(Math.abs(Number(output)));\n      }\n      console.log(output)\n    }\n  }\n\n  function onClickNumber(_number) {\n    var currentNumber = \"\";\n\n    if (number !== \"0\") {\n      currentNumber = number;\n    }\n\n    const newNumber = currentNumber + _number;\n    setNumber(newNumber);\n    console.log(newNumber)\n  }\n\n  function onClickOperator(char, value) {\n    if (char === '=') {\n      const currentExpression = number;\n      const output = eval(currentExpression).toString();\n      setNumber(output);\n    } else {\n      const newDisplay = number + \" \" + value + \" \";\n      setNumber(newDisplay);\n      console.log(newDisplay)\n    }\n  }\n  return (\n    <div className=\"container\">\n        <Screen data={number}/>\n        {/* STEP 4 - Render your components here and be sure to properly import/export all files */}\n      <div className=\"buttonHolder\">\n        <div>\n          <Specials changeData = {onClickSpecial} />\n          <Numbers changeData = {onClickNumber} />\n        </div>\n        <div>\n          <Operators changeData = {onClickOperator}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}