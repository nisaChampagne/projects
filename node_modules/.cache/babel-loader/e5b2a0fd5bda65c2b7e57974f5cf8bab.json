{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar util = require('core-util-is');\n\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar debugUtil = require('util');\n\nvar debug = void 0;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\n\nvar BufferList = require('./internal/streams/BufferList');\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar StringDecoder;\nutil.inherits(Readable, Stream);\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  var isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm; // cast to ints.\n\n  this.highWaterMark = Math.floor(this.highWaterMark); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options);\n  this._readableState = new ReadableState(options, this); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n\n  return er;\n} // if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\n\n\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n}; // Don't raise the hwm > 8MB\n\n\nvar MAX_HWM = 0x800000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true; // emit 'readable' now to make sure it gets picked up.\n\n  emitReadable(stream);\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  } // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n\n\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {}\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList; // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n  return ret;\n} // Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n\n  return ret;\n} // Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n\n      break;\n    }\n\n    ++c;\n  }\n\n  list.length -= c;\n  return ret;\n} // Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n\n      break;\n    }\n\n    ++c;\n  }\n\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","map":{"version":3,"sources":["/Users/lambda_school_loaner_244/Desktop/LAMBDA/projects/projectsCollection/node_modules/readable-stream/lib/_stream_readable.js"],"names":["pna","require","module","exports","Readable","isArray","Duplex","ReadableState","EE","EventEmitter","EElistenerCount","emitter","type","listeners","length","Stream","Buffer","OurUint8Array","global","Uint8Array","_uint8ArrayToBuffer","chunk","from","_isUint8Array","obj","isBuffer","util","inherits","debugUtil","debug","debuglog","BufferList","destroyImpl","StringDecoder","kProxyEvents","prependListener","event","fn","_events","on","unshift","options","stream","isDuplex","objectMode","readableObjectMode","hwm","highWaterMark","readableHwm","readableHighWaterMark","defaultHwm","Math","floor","buffer","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","destroyed","defaultEncoding","awaitDrain","readingMore","decoder","encoding","_readableState","readable","read","_read","destroy","_destroy","call","Object","defineProperty","prototype","get","undefined","set","value","_undestroy","undestroy","err","cb","push","state","skipChunkCheck","readableAddChunk","addToFront","onEofChunk","er","chunkInvalid","emit","getPrototypeOf","Error","addChunk","write","maybeReadMore","needMoreData","emitReadable","TypeError","isPaused","setEncoding","enc","MAX_HWM","computeNewHighWaterMark","n","howMuchToRead","head","data","parseInt","nOrig","endReadable","doRead","ret","fromList","end","nextTick","emitReadable_","flow","maybeReadMore_","len","pipe","dest","pipeOpts","src","doEnd","process","stdout","stderr","endFn","onend","unpipe","once","onunpipe","unpipeInfo","hasUnpiped","cleanup","ondrain","pipeOnDrain","cleanedUp","removeListener","onclose","onfinish","onerror","ondata","_writableState","needDrain","increasedAwaitDrain","indexOf","pause","resume","dests","i","index","splice","ev","res","nReadingNextTick","addListener","self","resume_","wrap","_this","paused","method","apply","arguments","bind","enumerable","_fromList","shift","join","concat","clear","fromListPartial","list","hasStrings","slice","copyFromBufferString","copyFromBuffer","p","c","next","str","nb","tail","allocUnsafe","copy","buf","endReadableNT","xs","x","l"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}"]},"metadata":{},"sourceType":"script"}