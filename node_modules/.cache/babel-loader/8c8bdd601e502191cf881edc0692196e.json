{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_244/Desktop/LAMBDA/projects/projectsCollection/src/projects/blog/router.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport { Header, Navigation } from './layout/layout';\nimport Posts from './posts/posts';\nimport SinglePost from './posts/singlepost';\nimport Form from './posts/form';\nimport EditPost from './posts/editpost';\n\nclass Router extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      post: []\n    };\n\n    this.getPost = () => {\n      axios.get(`https://jsonplaceholder.typicode.com/posts`).then(response => {\n        this.setState({\n          posts: response.data\n        });\n      });\n    };\n\n    this.deletePost = id => {\n      axios.delete(`https://jsonplaceholder.typicode.com/posts/${id}`).then(response => {\n        if (response.status === 200) {\n          const posts = [...this.state.posts];\n          let result = posts.filter(post => {\n            post.id !== id;\n          });\n          this.setState({\n            posts: result\n          });\n        }\n      });\n    };\n\n    this.createPost = post => {\n      axios.post(`https://jsonplaceholder.typicode.com/posts`, {\n        post\n      }).then(response => {\n        if (response.status === 201) {\n          Swal.fire('Post Create', 'It is created correctly', success);\n          let postId = {\n            id: response.data.id\n          };\n          const newPost = Object.assign({}, response.data.post, postId);\n          this.setState(prevState => ({\n            posts: [...prevState.posts, newPost]\n          }));\n        }\n      });\n    };\n\n    this.editPost = postUpdate => {\n      const id = postUpdate.id;\n      axios.put(`https://jsonplaceholder.typicode.com/posts/${id}`, {\n        postUpdate\n      }).then(res => {\n        if (res.status === 200) {\n          Swal.fire('Post Updated', 'The changes were saved correctly.', 'success');\n          let postId = res.data.id;\n          const posts = [...this.state.posts];\n          const postEdit = posts.findIndex(post => postId === post.id);\n          posts[postEdit] = postUpdate;\n          this.setState({\n            posts\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getPost();\n  }\n\n  render() {\n    return React.createElement(BrowserRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => {\n        return React.createElement(Posts, {\n          posts: this.state.posts,\n          deletePost: this.deletePost,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/post/:postId\",\n      render: props => {\n        let idPost = props.location.pathname.replace('/post/', '');\n        const posts = this.state.posts;\n        let filter;\n        filter = posts.filter(post => post.id === Number(idPost));\n        return React.createElement(SinglePost, {\n          post: filter[0],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/create\",\n      render: () => {\n        return React.createElement(Form, {\n          createPost: this.createPost,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/edit/:postId\",\n      render: props => {\n        let idPost = props.location.pathname.replace('/edit/', '');\n        const posts = this.state.posts;\n        let filter;\n        filter = posts.filter(post => post.id === Number(idPost));\n        return React.createElement(EditPost, {\n          post: filter[0],\n          editPost: this.editPost,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Router;","map":{"version":3,"sources":["/Users/lambda_school_loaner_244/Desktop/LAMBDA/projects/projectsCollection/src/projects/blog/router.js"],"names":["React","Component","BrowserRouter","Route","Switch","Redirect","axios","Swal","Header","Navigation","Posts","SinglePost","Form","EditPost","Router","state","post","getPost","get","then","response","setState","posts","data","deletePost","id","delete","status","result","filter","createPost","fire","success","postId","newPost","Object","assign","prevState","editPost","postUpdate","put","res","postEdit","findIndex","componentDidMount","render","props","idPost","location","pathname","replace","Number"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,SAAQC,aAAR,EAAuBC,KAAvB,EAA8BC,MAA9B,EAAsCC,QAAtC,QAAqD,kBAArD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAAQC,MAAR,EAAgBC,UAAhB,QAAiC,iBAAjC;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,QAAP,MAAqB,kBAArB;;AAEA,MAAMC,MAAN,SAAqBb,SAArB,CAA8B;AAAA;AAAA;AAAA,SAC1Bc,KAD0B,GACpB;AACFC,MAAAA,IAAI,EAAE;AADJ,KADoB;;AAAA,SAS1BC,OAT0B,GASlB,MAAI;AACRX,MAAAA,KAAK,CAACY,GAAN,CAAW,4CAAX,EACKC,IADL,CACUC,QAAQ,IAAG;AACb,aAAKC,QAAL,CAAc;AACVC,UAAAA,KAAK,EAACF,QAAQ,CAACG;AADL,SAAd;AAGH,OALL;AAMH,KAhByB;;AAAA,SAiB1BC,UAjB0B,GAiBZC,EAAD,IAAO;AAChBnB,MAAAA,KAAK,CAACoB,MAAN,CAAc,8CAA6CD,EAAG,EAA9D,EACKN,IADL,CACUC,QAAQ,IAAI;AACd,YAAGA,QAAQ,CAACO,MAAT,KAAoB,GAAvB,EAA2B;AACvB,gBAAML,KAAK,GAAG,CAAC,GAAG,KAAKP,KAAL,CAAWO,KAAf,CAAd;AACA,cAAIM,MAAM,GAAGN,KAAK,CAACO,MAAN,CAAab,IAAI,IAAI;AAC9BA,YAAAA,IAAI,CAACS,EAAL,KAAYA,EAAZ;AACH,WAFY,CAAb;AAGA,eAAKJ,QAAL,CAAc;AACVC,YAAAA,KAAK,EAAEM;AADG,WAAd;AAGH;AACJ,OAXL;AAYH,KA9ByB;;AAAA,SAgC1BE,UAhC0B,GAgCdd,IAAD,IAAU;AACjBV,MAAAA,KAAK,CAACU,IAAN,CAAY,4CAAZ,EAAyD;AAACA,QAAAA;AAAD,OAAzD,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,YAAGA,QAAQ,CAACO,MAAT,KAAoB,GAAvB,EAA2B;AACvBpB,UAAAA,IAAI,CAACwB,IAAL,CACI,aADJ,EAEI,yBAFJ,EAGIC,OAHJ;AAKA,cAAIC,MAAM,GAAG;AAACR,YAAAA,EAAE,EAAEL,QAAQ,CAACG,IAAT,CAAcE;AAAnB,WAAb;AACA,gBAAMS,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,QAAQ,CAACG,IAAT,CAAcP,IAAhC,EAAsCiB,MAAtC,CAAhB;AAEA,eAAKZ,QAAL,CAAcgB,SAAS,KAAK;AACxBf,YAAAA,KAAK,EAAE,CAAC,GAAGe,SAAS,CAACf,KAAd,EAAqBY,OAArB;AADiB,WAAL,CAAvB;AAGH;AACJ,OAfL;AAiBH,KAlDyB;;AAAA,SAmD1BI,QAnD0B,GAmDdC,UAAD,IAAgB;AAAA,YAChBd,EADgB,GACVc,UADU,CAChBd,EADgB;AAGvBnB,MAAAA,KAAK,CAACkC,GAAN,CAAW,8CAA6Cf,EAAG,EAA3D,EAA8D;AAACc,QAAAA;AAAD,OAA9D,EACMpB,IADN,CACWsB,GAAG,IAAI;AACT,YAAIA,GAAG,CAACd,MAAJ,KAAe,GAAnB,EAAwB;AACrBpB,UAAAA,IAAI,CAACwB,IAAL,CACI,cADJ,EAEI,mCAFJ,EAGI,SAHJ;AAMA,cAAIE,MAAM,GAAGQ,GAAG,CAAClB,IAAJ,CAASE,EAAtB;AAEf,gBAAMH,KAAK,GAAG,CAAC,GAAG,KAAKP,KAAL,CAAWO,KAAf,CAAd;AAEe,gBAAMoB,QAAQ,GAAGpB,KAAK,CAACqB,SAAN,CAAgB3B,IAAI,IAAIiB,MAAM,KAAKjB,IAAI,CAACS,EAAxC,CAAjB;AAEAH,UAAAA,KAAK,CAACoB,QAAD,CAAL,GAAkBH,UAAlB;AACA,eAAKlB,QAAL,CAAc;AACVC,YAAAA;AADU,WAAd;AAGF;AACJ,OApBN;AAqBH,KA3EyB;AAAA;;AAK1BsB,EAAAA,iBAAiB,GAAE;AACf,SAAK3B,OAAL;AACH;;AAsED4B,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAII,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,MAAM,EAAG,MAAM;AACjC,eACI,oBAAC,KAAD;AACI,UAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWO,KADtB;AAEI,UAAA,UAAU,EAAE,KAAKE,UAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,OAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAUI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,eAAlB;AAAkC,MAAA,MAAM,EAAIsB,KAAD,IAAW;AAClD,YAAIC,MAAM,GAAGD,KAAK,CAACE,QAAN,CAAeC,QAAf,CAAwBC,OAAxB,CAAgC,QAAhC,EAA0C,EAA1C,CAAb;AAEA,cAAM5B,KAAK,GAAC,KAAKP,KAAL,CAAWO,KAAvB;AACA,YAAIO,MAAJ;AACAA,QAAAA,MAAM,GAAGP,KAAK,CAACO,MAAN,CAAab,IAAI,IACtBA,IAAI,CAACS,EAAL,KAAY0B,MAAM,CAACJ,MAAD,CADb,CAAT;AAKA,eACI,oBAAC,UAAD;AACI,UAAA,IAAI,EAAElB,MAAM,CAAC,CAAD,CADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,OAfD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,EA0BI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,SAAlB;AAA4B,MAAA,MAAM,EAAE,MAAM;AACtC,eACI,oBAAC,IAAD;AACI,UAAA,UAAU,EAAE,KAAKC,UADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,OAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BJ,EAkCI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,eAAlB;AAAkC,MAAA,MAAM,EAAIgB,KAAD,IAAW;AAClD,YAAIC,MAAM,GAAGD,KAAK,CAACE,QAAN,CAAeC,QAAf,CAAwBC,OAAxB,CAAgC,QAAhC,EAA0C,EAA1C,CAAb;AACA,cAAM5B,KAAK,GAAC,KAAKP,KAAL,CAAWO,KAAvB;AACA,YAAIO,MAAJ;AACAA,QAAAA,MAAM,GAAGP,KAAK,CAACO,MAAN,CAAab,IAAI,IACtBA,IAAI,CAACS,EAAL,KAAY0B,MAAM,CAACJ,MAAD,CADb,CAAT;AAGA,eACI,oBAAC,QAAD;AACI,UAAA,IAAI,EAAElB,MAAM,CAAC,CAAD,CADhB;AAEI,UAAA,QAAQ,EAAE,KAAKS,QAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,OAbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlCJ,CAJJ,CAFJ,CAFJ,CADJ;AA8DH;;AA5IyB;;AA8I9B,eAAexB,MAAf","sourcesContent":["import React, {Component} from 'react'\n\nimport {BrowserRouter, Route, Switch, Redirect} from 'react-router-dom'\n\nimport axios from 'axios'\nimport Swal from 'sweetalert2'\n\nimport {Header, Navigation} from './layout/layout'\nimport Posts from './posts/posts'\nimport SinglePost from './posts/singlepost'\nimport Form from './posts/form'\nimport EditPost from './posts/editpost'\n\nclass Router extends Component{\n    state={\n        post: []\n    }\n\n    componentDidMount(){\n        this.getPost()\n    }\n\n    getPost=()=>{\n        axios.get(`https://jsonplaceholder.typicode.com/posts`)\n            .then(response=> {\n                this.setState({\n                    posts:response.data\n                })\n            })\n    }\n    deletePost = (id)=> {\n        axios.delete(`https://jsonplaceholder.typicode.com/posts/${id}`)\n            .then(response => {\n                if(response.status === 200){\n                    const posts = [...this.state.posts];\n                    let result = posts.filter(post => {\n                        post.id !== id\n                    })\n                    this.setState({\n                        posts: result\n                    })\n                }\n            })\n    }\n\n    createPost=(post) => {\n        axios.post(`https://jsonplaceholder.typicode.com/posts`, {post})\n            .then(response => {\n                if(response.status === 201){\n                    Swal.fire(\n                        'Post Create',\n                        'It is created correctly',\n                        success\n                    )\n                    let postId = {id: response.data.id}\n                    const newPost = Object.assign({}, response.data.post, postId)\n\n                    this.setState(prevState => ({\n                        posts: [...prevState.posts, newPost]\n                    }))\n                }\n            })\n\n    }\n    editPost = (postUpdate) => {\n        const {id} = postUpdate;\n \n        axios.put(`https://jsonplaceholder.typicode.com/posts/${id}`, {postUpdate})\n             .then(res => {\n                 if (res.status === 200) {\n                    Swal.fire(\n                        'Post Updated',\n                        'The changes were saved correctly.',\n                        'success'\n                    )\n \n                    let postId = res.data.id;\n \n\t\t\t\t\tconst posts = [...this.state.posts];\n \n                    const postEdit = posts.findIndex(post => postId === post.id)\n \n                    posts[postEdit] = postUpdate;\n                    this.setState({\n                        posts \n                    })\n                 }\n             })\n    }\n\n    render() { \n        return (  \n            <BrowserRouter>\n \n                <div className=\"container\">\n                    <Header />\n                    <div className=\"row justify-content-center\">\n \n                        <Navigation />\n \n                        <Switch>\n                            <Route exact path=\"/\" render={ () => {\n                                return(\n                                    <Posts \n                                        posts={this.state.posts}\n                                        deletePost={this.deletePost}\n                                    />\n                                );\n                            }} />\n \n                            <Route exact path=\"/post/:postId\" render={ (props) => {\n                                let idPost = props.location.pathname.replace('/post/', '')\n \n                                const posts=this.state.posts;\n                                let filter;\n                                filter = posts.filter(post => (\n                                    post.id === Number(idPost)\n                                ))\n \n \n                                return(\n                                    <SinglePost \n                                        post={filter[0]} \n                                    />\n                                )\n                            }} />\n                            <Route exact path=\"/create\" render={() => {\n                                return(\n                                    <Form \n                                        createPost={this.createPost}\n                                    />\n                                );\n                            }}\n                            />\n                            <Route exact path=\"/edit/:postId\" render={ (props) => {\n                                let idPost = props.location.pathname.replace('/edit/', '')\n                                const posts=this.state.posts;\n                                let filter;\n                                filter = posts.filter(post => (\n                                    post.id === Number(idPost)\n                                ))                                \n                                return(\n                                    <EditPost\n                                        post={filter[0]} \n                                        editPost={this.editPost}\n                                    />\n                                )\n                            }} />                            \n                        </Switch>\n                    </div>\n                </div>            \n            </BrowserRouter>\n        );\n    }\n} \nexport default Router;\n"]},"metadata":{},"sourceType":"module"}