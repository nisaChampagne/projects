{"ast":null,"code":"'use strict';\n\nvar doctype = require('../common/doctype'),\n    DOCUMENT_MODE = require('../common/html').DOCUMENT_MODE; //Conversion tables for DOM Level1 structure emulation\n\n\nvar nodeTypes = {\n  element: 1,\n  text: 3,\n  cdata: 4,\n  comment: 8\n};\nvar nodePropertyShorthands = {\n  tagName: 'name',\n  childNodes: 'children',\n  parentNode: 'parent',\n  previousSibling: 'prev',\n  nextSibling: 'next',\n  nodeValue: 'data'\n}; //Node\n\nvar Node = function (props) {\n  for (var key in props) {\n    if (props.hasOwnProperty(key)) this[key] = props[key];\n  }\n};\n\nNode.prototype = {\n  get firstChild() {\n    var children = this.children;\n    return children && children[0] || null;\n  },\n\n  get lastChild() {\n    var children = this.children;\n    return children && children[children.length - 1] || null;\n  },\n\n  get nodeType() {\n    return nodeTypes[this.type] || nodeTypes.element;\n  }\n\n};\nObject.keys(nodePropertyShorthands).forEach(function (key) {\n  var shorthand = nodePropertyShorthands[key];\n  Object.defineProperty(Node.prototype, key, {\n    get: function () {\n      return this[shorthand] || null;\n    },\n    set: function (val) {\n      this[shorthand] = val;\n      return val;\n    }\n  });\n}); //Node construction\n\nexports.createDocument = function () {\n  return new Node({\n    type: 'root',\n    name: 'root',\n    parent: null,\n    prev: null,\n    next: null,\n    children: [],\n    'x-mode': DOCUMENT_MODE.NO_QUIRKS\n  });\n};\n\nexports.createDocumentFragment = function () {\n  return new Node({\n    type: 'root',\n    name: 'root',\n    parent: null,\n    prev: null,\n    next: null,\n    children: []\n  });\n};\n\nexports.createElement = function (tagName, namespaceURI, attrs) {\n  var attribs = Object.create(null),\n      attribsNamespace = Object.create(null),\n      attribsPrefix = Object.create(null);\n\n  for (var i = 0; i < attrs.length; i++) {\n    var attrName = attrs[i].name;\n    attribs[attrName] = attrs[i].value;\n    attribsNamespace[attrName] = attrs[i].namespace;\n    attribsPrefix[attrName] = attrs[i].prefix;\n  }\n\n  return new Node({\n    type: tagName === 'script' || tagName === 'style' ? tagName : 'tag',\n    name: tagName,\n    namespace: namespaceURI,\n    attribs: attribs,\n    'x-attribsNamespace': attribsNamespace,\n    'x-attribsPrefix': attribsPrefix,\n    children: [],\n    parent: null,\n    prev: null,\n    next: null\n  });\n};\n\nexports.createCommentNode = function (data) {\n  return new Node({\n    type: 'comment',\n    data: data,\n    parent: null,\n    prev: null,\n    next: null\n  });\n};\n\nvar createTextNode = function (value) {\n  return new Node({\n    type: 'text',\n    data: value,\n    parent: null,\n    prev: null,\n    next: null\n  });\n}; //Tree mutation\n\n\nvar appendChild = exports.appendChild = function (parentNode, newNode) {\n  var prev = parentNode.children[parentNode.children.length - 1];\n\n  if (prev) {\n    prev.next = newNode;\n    newNode.prev = prev;\n  }\n\n  parentNode.children.push(newNode);\n  newNode.parent = parentNode;\n};\n\nvar insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {\n  var insertionIdx = parentNode.children.indexOf(referenceNode),\n      prev = referenceNode.prev;\n\n  if (prev) {\n    prev.next = newNode;\n    newNode.prev = prev;\n  }\n\n  referenceNode.prev = newNode;\n  newNode.next = referenceNode;\n  parentNode.children.splice(insertionIdx, 0, newNode);\n  newNode.parent = parentNode;\n};\n\nexports.setTemplateContent = function (templateElement, contentElement) {\n  appendChild(templateElement, contentElement);\n};\n\nexports.getTemplateContent = function (templateElement) {\n  return templateElement.children[0];\n};\n\nexports.setDocumentType = function (document, name, publicId, systemId) {\n  var data = doctype.serializeContent(name, publicId, systemId),\n      doctypeNode = null;\n\n  for (var i = 0; i < document.children.length; i++) {\n    if (document.children[i].type === 'directive' && document.children[i].name === '!doctype') {\n      doctypeNode = document.children[i];\n      break;\n    }\n  }\n\n  if (doctypeNode) {\n    doctypeNode.data = data;\n    doctypeNode['x-name'] = name;\n    doctypeNode['x-publicId'] = publicId;\n    doctypeNode['x-systemId'] = systemId;\n  } else {\n    appendChild(document, new Node({\n      type: 'directive',\n      name: '!doctype',\n      data: data,\n      'x-name': name,\n      'x-publicId': publicId,\n      'x-systemId': systemId\n    }));\n  }\n};\n\nexports.setDocumentMode = function (document, mode) {\n  document['x-mode'] = mode;\n};\n\nexports.getDocumentMode = function (document) {\n  return document['x-mode'];\n};\n\nexports.detachNode = function (node) {\n  if (node.parent) {\n    var idx = node.parent.children.indexOf(node),\n        prev = node.prev,\n        next = node.next;\n    node.prev = null;\n    node.next = null;\n    if (prev) prev.next = next;\n    if (next) next.prev = prev;\n    node.parent.children.splice(idx, 1);\n    node.parent = null;\n  }\n};\n\nexports.insertText = function (parentNode, text) {\n  var lastChild = parentNode.children[parentNode.children.length - 1];\n  if (lastChild && lastChild.type === 'text') lastChild.data += text;else appendChild(parentNode, createTextNode(text));\n};\n\nexports.insertTextBefore = function (parentNode, text, referenceNode) {\n  var prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];\n  if (prevNode && prevNode.type === 'text') prevNode.data += text;else insertBefore(parentNode, createTextNode(text), referenceNode);\n};\n\nexports.adoptAttributes = function (recipient, attrs) {\n  for (var i = 0; i < attrs.length; i++) {\n    var attrName = attrs[i].name;\n\n    if (typeof recipient.attribs[attrName] === 'undefined') {\n      recipient.attribs[attrName] = attrs[i].value;\n      recipient['x-attribsNamespace'][attrName] = attrs[i].namespace;\n      recipient['x-attribsPrefix'][attrName] = attrs[i].prefix;\n    }\n  }\n}; //Tree traversing\n\n\nexports.getFirstChild = function (node) {\n  return node.children[0];\n};\n\nexports.getChildNodes = function (node) {\n  return node.children;\n};\n\nexports.getParentNode = function (node) {\n  return node.parent;\n};\n\nexports.getAttrList = function (element) {\n  var attrList = [];\n\n  for (var name in element.attribs) {\n    attrList.push({\n      name: name,\n      value: element.attribs[name],\n      namespace: element['x-attribsNamespace'][name],\n      prefix: element['x-attribsPrefix'][name]\n    });\n  }\n\n  return attrList;\n}; //Node data\n\n\nexports.getTagName = function (element) {\n  return element.name;\n};\n\nexports.getNamespaceURI = function (element) {\n  return element.namespace;\n};\n\nexports.getTextNodeContent = function (textNode) {\n  return textNode.data;\n};\n\nexports.getCommentNodeContent = function (commentNode) {\n  return commentNode.data;\n};\n\nexports.getDocumentTypeNodeName = function (doctypeNode) {\n  return doctypeNode['x-name'];\n};\n\nexports.getDocumentTypeNodePublicId = function (doctypeNode) {\n  return doctypeNode['x-publicId'];\n};\n\nexports.getDocumentTypeNodeSystemId = function (doctypeNode) {\n  return doctypeNode['x-systemId'];\n}; //Node types\n\n\nexports.isTextNode = function (node) {\n  return node.type === 'text';\n};\n\nexports.isCommentNode = function (node) {\n  return node.type === 'comment';\n};\n\nexports.isDocumentTypeNode = function (node) {\n  return node.type === 'directive' && node.name === '!doctype';\n};\n\nexports.isElementNode = function (node) {\n  return !!node.attribs;\n};","map":{"version":3,"sources":["/Users/lambda_school_loaner_244/Desktop/LAMBDA/projects/projectsCollection/node_modules/parse5/lib/tree_adapters/htmlparser2.js"],"names":["doctype","require","DOCUMENT_MODE","nodeTypes","element","text","cdata","comment","nodePropertyShorthands","tagName","childNodes","parentNode","previousSibling","nextSibling","nodeValue","Node","props","key","hasOwnProperty","prototype","firstChild","children","lastChild","length","nodeType","type","Object","keys","forEach","shorthand","defineProperty","get","set","val","exports","createDocument","name","parent","prev","next","NO_QUIRKS","createDocumentFragment","createElement","namespaceURI","attrs","attribs","create","attribsNamespace","attribsPrefix","i","attrName","value","namespace","prefix","createCommentNode","data","createTextNode","appendChild","newNode","push","insertBefore","referenceNode","insertionIdx","indexOf","splice","setTemplateContent","templateElement","contentElement","getTemplateContent","setDocumentType","document","publicId","systemId","serializeContent","doctypeNode","setDocumentMode","mode","getDocumentMode","detachNode","node","idx","insertText","insertTextBefore","prevNode","adoptAttributes","recipient","getFirstChild","getChildNodes","getParentNode","getAttrList","attrList","getTagName","getNamespaceURI","getTextNodeContent","textNode","getCommentNodeContent","commentNode","getDocumentTypeNodeName","getDocumentTypeNodePublicId","getDocumentTypeNodeSystemId","isTextNode","isCommentNode","isDocumentTypeNode","isElementNode"],"mappings":"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","sourcesContent":["'use strict';\n\nvar doctype = require('../common/doctype'),\n    DOCUMENT_MODE = require('../common/html').DOCUMENT_MODE;\n\n\n//Conversion tables for DOM Level1 structure emulation\nvar nodeTypes = {\n    element: 1,\n    text: 3,\n    cdata: 4,\n    comment: 8\n};\n\nvar nodePropertyShorthands = {\n    tagName: 'name',\n    childNodes: 'children',\n    parentNode: 'parent',\n    previousSibling: 'prev',\n    nextSibling: 'next',\n    nodeValue: 'data'\n};\n\n//Node\nvar Node = function (props) {\n    for (var key in props) {\n        if (props.hasOwnProperty(key))\n            this[key] = props[key];\n    }\n};\n\nNode.prototype = {\n    get firstChild() {\n        var children = this.children;\n\n        return children && children[0] || null;\n    },\n\n    get lastChild() {\n        var children = this.children;\n\n        return children && children[children.length - 1] || null;\n    },\n\n    get nodeType() {\n        return nodeTypes[this.type] || nodeTypes.element;\n    }\n};\n\nObject.keys(nodePropertyShorthands).forEach(function (key) {\n    var shorthand = nodePropertyShorthands[key];\n\n    Object.defineProperty(Node.prototype, key, {\n        get: function () {\n            return this[shorthand] || null;\n        },\n        set: function (val) {\n            this[shorthand] = val;\n            return val;\n        }\n    });\n});\n\n\n//Node construction\nexports.createDocument = function () {\n    return new Node({\n        type: 'root',\n        name: 'root',\n        parent: null,\n        prev: null,\n        next: null,\n        children: [],\n        'x-mode': DOCUMENT_MODE.NO_QUIRKS\n    });\n};\n\nexports.createDocumentFragment = function () {\n    return new Node({\n        type: 'root',\n        name: 'root',\n        parent: null,\n        prev: null,\n        next: null,\n        children: []\n    });\n};\n\nexports.createElement = function (tagName, namespaceURI, attrs) {\n    var attribs = Object.create(null),\n        attribsNamespace = Object.create(null),\n        attribsPrefix = Object.create(null);\n\n    for (var i = 0; i < attrs.length; i++) {\n        var attrName = attrs[i].name;\n\n        attribs[attrName] = attrs[i].value;\n        attribsNamespace[attrName] = attrs[i].namespace;\n        attribsPrefix[attrName] = attrs[i].prefix;\n    }\n\n    return new Node({\n        type: tagName === 'script' || tagName === 'style' ? tagName : 'tag',\n        name: tagName,\n        namespace: namespaceURI,\n        attribs: attribs,\n        'x-attribsNamespace': attribsNamespace,\n        'x-attribsPrefix': attribsPrefix,\n        children: [],\n        parent: null,\n        prev: null,\n        next: null\n    });\n};\n\nexports.createCommentNode = function (data) {\n    return new Node({\n        type: 'comment',\n        data: data,\n        parent: null,\n        prev: null,\n        next: null\n    });\n};\n\nvar createTextNode = function (value) {\n    return new Node({\n        type: 'text',\n        data: value,\n        parent: null,\n        prev: null,\n        next: null\n    });\n};\n\n\n//Tree mutation\nvar appendChild = exports.appendChild = function (parentNode, newNode) {\n    var prev = parentNode.children[parentNode.children.length - 1];\n\n    if (prev) {\n        prev.next = newNode;\n        newNode.prev = prev;\n    }\n\n    parentNode.children.push(newNode);\n    newNode.parent = parentNode;\n};\n\nvar insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {\n    var insertionIdx = parentNode.children.indexOf(referenceNode),\n        prev = referenceNode.prev;\n\n    if (prev) {\n        prev.next = newNode;\n        newNode.prev = prev;\n    }\n\n    referenceNode.prev = newNode;\n    newNode.next = referenceNode;\n\n    parentNode.children.splice(insertionIdx, 0, newNode);\n    newNode.parent = parentNode;\n};\n\nexports.setTemplateContent = function (templateElement, contentElement) {\n    appendChild(templateElement, contentElement);\n};\n\nexports.getTemplateContent = function (templateElement) {\n    return templateElement.children[0];\n};\n\nexports.setDocumentType = function (document, name, publicId, systemId) {\n    var data = doctype.serializeContent(name, publicId, systemId),\n        doctypeNode = null;\n\n    for (var i = 0; i < document.children.length; i++) {\n        if (document.children[i].type === 'directive' && document.children[i].name === '!doctype') {\n            doctypeNode = document.children[i];\n            break;\n        }\n    }\n\n    if (doctypeNode) {\n        doctypeNode.data = data;\n        doctypeNode['x-name'] = name;\n        doctypeNode['x-publicId'] = publicId;\n        doctypeNode['x-systemId'] = systemId;\n    }\n\n    else {\n        appendChild(document, new Node({\n            type: 'directive',\n            name: '!doctype',\n            data: data,\n            'x-name': name,\n            'x-publicId': publicId,\n            'x-systemId': systemId\n        }));\n    }\n\n};\n\nexports.setDocumentMode = function (document, mode) {\n    document['x-mode'] = mode;\n};\n\nexports.getDocumentMode = function (document) {\n    return document['x-mode'];\n};\n\nexports.detachNode = function (node) {\n    if (node.parent) {\n        var idx = node.parent.children.indexOf(node),\n            prev = node.prev,\n            next = node.next;\n\n        node.prev = null;\n        node.next = null;\n\n        if (prev)\n            prev.next = next;\n\n        if (next)\n            next.prev = prev;\n\n        node.parent.children.splice(idx, 1);\n        node.parent = null;\n    }\n};\n\nexports.insertText = function (parentNode, text) {\n    var lastChild = parentNode.children[parentNode.children.length - 1];\n\n    if (lastChild && lastChild.type === 'text')\n        lastChild.data += text;\n    else\n        appendChild(parentNode, createTextNode(text));\n};\n\nexports.insertTextBefore = function (parentNode, text, referenceNode) {\n    var prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];\n\n    if (prevNode && prevNode.type === 'text')\n        prevNode.data += text;\n    else\n        insertBefore(parentNode, createTextNode(text), referenceNode);\n};\n\nexports.adoptAttributes = function (recipient, attrs) {\n    for (var i = 0; i < attrs.length; i++) {\n        var attrName = attrs[i].name;\n\n        if (typeof recipient.attribs[attrName] === 'undefined') {\n            recipient.attribs[attrName] = attrs[i].value;\n            recipient['x-attribsNamespace'][attrName] = attrs[i].namespace;\n            recipient['x-attribsPrefix'][attrName] = attrs[i].prefix;\n        }\n    }\n};\n\n\n//Tree traversing\nexports.getFirstChild = function (node) {\n    return node.children[0];\n};\n\nexports.getChildNodes = function (node) {\n    return node.children;\n};\n\nexports.getParentNode = function (node) {\n    return node.parent;\n};\n\nexports.getAttrList = function (element) {\n    var attrList = [];\n\n    for (var name in element.attribs) {\n        attrList.push({\n            name: name,\n            value: element.attribs[name],\n            namespace: element['x-attribsNamespace'][name],\n            prefix: element['x-attribsPrefix'][name]\n        });\n    }\n\n    return attrList;\n};\n\n\n//Node data\nexports.getTagName = function (element) {\n    return element.name;\n};\n\nexports.getNamespaceURI = function (element) {\n    return element.namespace;\n};\n\nexports.getTextNodeContent = function (textNode) {\n    return textNode.data;\n};\n\nexports.getCommentNodeContent = function (commentNode) {\n    return commentNode.data;\n};\n\nexports.getDocumentTypeNodeName = function (doctypeNode) {\n    return doctypeNode['x-name'];\n};\n\nexports.getDocumentTypeNodePublicId = function (doctypeNode) {\n    return doctypeNode['x-publicId'];\n};\n\nexports.getDocumentTypeNodeSystemId = function (doctypeNode) {\n    return doctypeNode['x-systemId'];\n};\n\n\n//Node types\nexports.isTextNode = function (node) {\n    return node.type === 'text';\n};\n\nexports.isCommentNode = function (node) {\n    return node.type === 'comment';\n};\n\nexports.isDocumentTypeNode = function (node) {\n    return node.type === 'directive' && node.name === '!doctype';\n};\n\nexports.isElementNode = function (node) {\n    return !!node.attribs;\n};\n"]},"metadata":{},"sourceType":"script"}